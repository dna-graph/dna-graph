type Query @shield(all) {
    users: [User] @shield(isAdmin)
    viewer: User @custom
}

type Mutation @shield(all) {
    createUser: User @private
    signup(name: String, email: String, password: String): String @custom
    login(email: String, password: String): String @custom
    deleteUser: User @shield(isAdmin)
    switchBusiness(id: ID!, name: String): String @custom
    createCustomType(name: String): CustomType @custom
}

type Enums @private {
    id: ID! @id
    userStateEnum: UserStateEnum
}

type User @shield(or(isOwner,isAdmin)) @auto @live {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    name: String 
    email: String @unique
    password: String @private
    active: Boolean
    age: Float
    superOtherSecureData: [OtherSecureData] @private @relation(link: INLINE)
    superSecureData: [SecureData] @private
    state: UserStateEnum @custom
    teams: [Team]
    companies: [Company]
    upperCaseName: String @custom
    nameWith(text: String!, input: customInput): String @custom
}

type SecureData @private {
    id: ID! @id
    content: String
    acl: User @relation(link: INLINE) @private
}

type OtherSecureData @private {
    id: ID! @id
    content: String
}

type CustomType @custom @shield(isAdmin) {
    otherText: String
    otherAge: Int
    otherPrice: Float
}

type Team @auto(create, get) @shield(all) {
    id: ID! @id
    users: [User] @relation(link: INLINE)
    company: Company @relation(link: INLINE)
}

type Company @auto(create, get) @shield(all) {
    id: ID! @id
    teams: [Team]
    users: [User] @relation(link: INLINE)
}

input customInput {
    name: String!
    sentence: String
    position: [positionInput]!
}

input positionInput {
    latitude: Float
    longitude: Float
}

type Product @shield(all) {
    id: ID! @id
    team: Team @relation(link: INLINE)
    name: String
    privateConfig: String @private
}

enum UserStateEnum {
    ACTIVE
    INACTIVE
}